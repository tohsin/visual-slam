//
//  main.cpp
//  eigen_play
//
//  Created by Tosin Oseni on 25/06/2022.
//

#include <iostream>
using namespace std;

#include<Eigen/Core>
#include <Eigen/Dense>

#include<ctime>
#define MATRIX_SIZE 50
//using namespace Eigen;



int main(int argc, const char * argv[]) {
    // insert code here...
    // all matrixs and vectors are EIGEN::matrix
    // class. Its first three parameters are: data type, row, column Declare a 2∗3
    // float matrix
    Eigen::Matrix<float, 2, 3> matrix_23;
    
    Eigen::Vector3d v_3d;
    // is same as a 1 d atrix nuber of col is 1 and 3 rows
    Eigen::Matrix<float, 3, 1> vd_3d;
    
    //matrix3d is matrix with double
    Eigen::Matrix3d matrix_33 = Eigen::Matrix3d::Zero(); // intilaised to zero for dfault
    
    // is same with matrix with double
    //use dynaic if you dont know the size of the eigen
    Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> matrix_dynamic;
    
    // input data (initialization)
    matrix_23 << 1, 2, 3, 4, 5, 6;
    
    Eigen::MatrixXd matrix_x;
    
    cout <<"matrix 2 x 3 from 1 to 6: \n" << matrix_23 <<endl;
    
    for (int i = 0; i < 2; i++ ){
        for (int j = 0 ; j<3; j++){
            cout << matrix_23(i, j) << "\t";
            cout << endl;
        }
    }
    
    v_3d << 3, 2, 1;
    vd_3d << 4, 5, 6;
    
    // In Eigen you can't mix two different types of matrices, like this is
    // wrong Matrix<double, 2, 1> result_wrong_type = matrix_23 ∗ v_3d;
    // It should be explicitly converted
    Eigen::Matrix<double, 2, 1> result = matrix_23.cast<double>() * v_3d;
    cout << "[1,2,3;4,5,6]∗[3,2,1]=" << result.transpose() << endl;
    
    Eigen::Matrix<float, 2, 1> result2 = matrix_23 * vd_3d;
    // this is wrong
    cout << "[1,2,3;4,5,6]∗[4,5,6]: " << result2.transpose() << endl;
    
    
    // Also you can't misjudge the dimensions of the matrix
    // Try canceling the comments below to see what Eigen will report. // Eigen::Matrix<double, 2, 3> result_wrong_dimension =
    // matrix_23.cast<double>() ∗ v_3d;
    // some matrix operations
    // The basic operations are not demonstrated, just use +−∗/ operators.
    
    matrix_33 = Eigen::Matrix3d::Random(); // Random Number Matrix
    cout << "random matrix: \n" << matrix_33 << endl;
    cout << "transpose: \n" << matrix_33.transpose() << endl;
    cout << "sum: " << matrix_33.sum() << endl;
    cout << "trace: " << matrix_33.trace() << endl;
    cout << "times 10: \n" << 10 * matrix_33 << endl;
    cout << "inverse: \n" << matrix_33.inverse() << endl;
    cout << "det: " << matrix_33.determinant() << endl;
    
    // Eigenvalues
    
    // Real symmetric matrix can guarantee successful diagonalization
    
    Eigen::SelfAdjointEigenSolver< Eigen::Matrix3d > eigen_solver(matrix_33.transpose() * matrix_33);
    cout << "Eigen values = \n" << eigen_solver.eigenvalues() << endl;
    cout << "Eigen vectors = \n" << eigen_solver.eigenvectors() << endl;
    // Solving equations
    // We solve the equation of matrix_NN * x = v_Nd
    // The size of N is defined in the previous macro, which is generated by a // random number Direct inversion is the most direct, but the amount of
    // inverse operations is large.
    Eigen::Matrix<double, MATRIX_SIZE, MATRIX_SIZE> matrix_NN;
    matrix_NN = Eigen::MatrixXd::Random( MATRIX_SIZE, MATRIX_SIZE);
    
    matrix_NN = matrix_NN * matrix_NN.transpose(); // Guarantee semi−positive definite
    Eigen::Matrix<double, MATRIX_SIZE, 1> v_Nd = Eigen::MatrixXd::Random(MATRIX_SIZE, 1);
    clock_t time_stt = clock(); // timing
    // Direct inversion
    Eigen::Matrix<double, MATRIX_SIZE, 1> x = matrix_NN.inverse() * v_Nd; cout << "time of normal inverse is "
    << 1000 * (clock() - time_stt) / (double)CLOCKS_PER_SEC << "ms" << endl; cout << "x = " << x.transpose() << endl;
    // Usually solved by matrix decomposition, such as QR decomposition, the speed // will be much faster
    time_stt = clock();
    x = matrix_NN.colPivHouseholderQr().solve(v_Nd);
    cout << "time of Qr decomposition is "
    << 1000 * (clock() - time_stt) / (double)CLOCKS_PER_SEC << "ms" << endl;
    cout << "x = " << x.transpose() << endl;
    // For positive definite matrices, you can also use cholesky decomposition to // solve equations.
    time_stt = clock();
    x = matrix_NN.ldlt().solve(v_Nd);
    cout << "time of ldlt decomposition is "
    << 1000 * (clock() - time_stt) / (double)CLOCKS_PER_SEC << "ms" << endl;
    cout << "x = " << x.transpose() << endl;
    
    return 0;
}
