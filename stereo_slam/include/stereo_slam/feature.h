#pragma once

#include "stereo_slam/common_include.h"

namespace stereoSlam{

// forwarddecleration
struct Frame;
struct MapPoint;
// 2D feature points
//  Will be associated with a map point after triangulation
struct Feature{
    EIGEN_MAKE_ALIGNED_OPERATOR_NEW;
    typedef std::shared_ptr<Feature> Ptr;

    std::weak_ptr<Frame> frame_;  // frame that takes  features to access host frame 

    cv::KeyPoint position_; // 2d pixel  position

    std::weak_ptr<MapPoint> map_point_;

    bool is_outlier_ = false; // is outlier?
    bool is_on_left_image_ = true; // is detected on the left image?

    Feature();

    Feature(std::shared_ptr<Frame> frame, const cv::KeyPoint &kp)
                    : frame_(frame), position_(kp) {}
}
}

// We can access the host frame and its corresponding map point through a feature object.
//However, the real ownership of frame and map point objects belongs to the map.
//In order to avoid the circular reference generated by shared_ptr, the weak_ptr is used